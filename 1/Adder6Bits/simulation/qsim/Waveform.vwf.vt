// Copyright (C) 2021  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/06/2022 16:06:20"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Adder6Bit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Adder6Bit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A0;
reg A1;
reg A2;
reg A3;
reg A4;
reg A5;
reg B0;
reg B1;
reg B2;
reg B3;
reg B4;
reg B5;
reg C_in;
// wires                                               
wire C_out;
wire Sum0;
wire Sum1;
wire Sum2;
wire Sum3;
wire Sum4;
wire Sum5;

// assign statements (if any)                          
Adder6Bit i1 (
// port map - connection between master ports and signals/registers   
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.A4(A4),
	.A5(A5),
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.B4(B4),
	.B5(B5),
	.C_in(C_in),
	.C_out(C_out),
	.Sum0(Sum0),
	.Sum1(Sum1),
	.Sum2(Sum2),
	.Sum3(Sum3),
	.Sum4(Sum4),
	.Sum5(Sum5)
);
initial 
begin 
#1000000 $finish;
end 

// A0
initial
begin
	A0 = 1'b0;
	A0 = #10000 1'b1;
	A0 = #40000 1'b0;
end 

// A1
initial
begin
	A1 = 1'b0;
	A1 = #10000 1'b1;
	A1 = #40000 1'b0;
end 

// A2
initial
begin
	A2 = 1'b0;
	A2 = #10000 1'b1;
	A2 = #40000 1'b0;
end 

// A3
initial
begin
	A3 = 1'b0;
	A3 = #10000 1'b1;
	A3 = #40000 1'b0;
end 

// A4
initial
begin
	A4 = 1'b0;
	A4 = #10000 1'b1;
	A4 = #40000 1'b0;
end 

// A5
initial
begin
	A5 = 1'b0;
end 

// B0
initial
begin
	B0 = 1'b0;
end 

// B1
initial
begin
	B1 = 1'b0;
	B1 = #10000 1'b1;
	B1 = #40000 1'b0;
end 

// B2
initial
begin
	B2 = 1'b0;
	B2 = #10000 1'b1;
	B2 = #40000 1'b0;
end 

// B3
initial
begin
	B3 = 1'b0;
	B3 = #10000 1'b1;
	B3 = #40000 1'b0;
end 

// B4
initial
begin
	B4 = 1'b0;
	B4 = #10000 1'b1;
	B4 = #40000 1'b0;
end 

// B5
initial
begin
	B5 = 1'b0;
end 

// C_in
initial
begin
	C_in = 1'b0;
end 
endmodule

